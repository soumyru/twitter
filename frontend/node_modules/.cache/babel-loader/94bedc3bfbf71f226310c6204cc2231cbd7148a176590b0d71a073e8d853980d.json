{"ast":null,"code":"import React,{useState}from\"react\";import\"./TweetBox.css\";import{Avatar,Button}from\"@mui/material\";import AddPhotoAlternateOutlinedIcon from\"@mui/icons-material/AddPhotoAlternateOutlined\";import axios from\"axios\";// import { useUserAuth } from \"../../../context/UserAuthContext\";\nimport useLoggedInUser from\"../../../hooks/useLoggedInUser\";import{useAuthState}from'react-firebase-hooks/auth';import auth from'../../../firebase.init';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function TweetBox(){var _loggedInUser$,_loggedInUser$2,_loggedInUser$3,_loggedInUser$4;const[post,setPost]=useState(\"\");const[imageURL,setImageURL]=useState(\"\");const[isLoading,setIsLoading]=useState(false);const[loggedInUser]=useLoggedInUser();const[name,setName]=useState('');const[username,setUsername]=useState(' ');const[user]=useAuthState(auth);//   const { user } = useUserAuth();//current user\nconst email=user===null||user===void 0?void 0:user.email;//if profile picture is there, that will be displayed otherwise the avatar will be \nconst userProfilePic=(_loggedInUser$=loggedInUser[0])!==null&&_loggedInUser$!==void 0&&_loggedInUser$.profileImage?(_loggedInUser$2=loggedInUser[0])===null||_loggedInUser$2===void 0?void 0:_loggedInUser$2.profileImage:\"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\";/* this is the console structure when user signs up using email/password unlike google sign in\r\n  providerData is user data and inside it is provider id which has value 'password' \r\n  And in case of google log in, the providerId is 'google.com' */ // console.log(user?.providerData[0]?.providerId);\n//   console.log(loggedInUser);\nconst handleUploadImage=e=>{setIsLoading(true);//when we upload our imae it should be loading\nconst image=e.target.files[0];//getting the image\nconsole.log(image);const formData=new FormData();formData.set(\"image\",image);//using axios method to implement fetch method easily as fetch will complex it\naxios.post(\"https://api.imgbb.com/1/upload?key=023ae543332e64852a79bb86e7615247\",formData)//this api key is from imgbb.com where we will host our images for free\n.then(res=>{//getting response\n// setImageURL(res);\n//console.log(res); //in console->object->data->data->display_url->contains the pictur ethat we uploaded so we will nw setImageUrl equal to that path\nsetImageURL(res.data.data.display_url);console.log(res.data.data.display_url);//now this will display the uploaded image url in imgbb site\nsetIsLoading(false);}).catch(error=>{console.log(error);setIsLoading(false);});};const handleTweet=e=>{var _user$providerData$;e.preventDefault();console.log(user);/* if user has loggedIn using google account login then in that case we don not have user info\r\n    so we are checking if user logged in using email/password then we set name and username according to user data structure as shown in console */if((user===null||user===void 0?void 0:(_user$providerData$=user.providerData[0])===null||_user$providerData$===void 0?void 0:_user$providerData$.providerId)==='password'){fetch(\"http://localhost:5000/loggedInUser?email=\".concat(email)).then(res=>res.json()).then(data=>{var _data$,_data$2;setName((_data$=data[0])===null||_data$===void 0?void 0:_data$.name);setUsername((_data$2=data[0])===null||_data$2===void 0?void 0:_data$2.username);});}else{setName(user===null||user===void 0?void 0:user.displayName);setUsername(email===null||email===void 0?void 0:email.split('@')[0]);}if(name){const userPost={profilePhoto:userProfilePic,post:post,photo:imageURL,username:username,name:name,email:email};// console.log(userPost);\nsetPost(\"\");//resetting the post field & image back i.e., after posting something the input will get empty again\nsetImageURL(\"\");fetch(\"http://localhost:5000/post\",{//in fetch we are fetching the post route\nmethod:\"POST\",headers:{'Content-type':'application/json'},body:JSON.stringify(userPost)}).then(res=>res.json())// we get the response\n.then(data=>{//get data n console log it\nconsole.log(data);});}};return/*#__PURE__*/_jsx(\"div\",{className:\"tweetBox\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleTweet,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tweetBox__input\",children:[/*#__PURE__*/_jsx(Avatar,{src:(_loggedInUser$3=loggedInUser[0])!==null&&_loggedInUser$3!==void 0&&_loggedInUser$3.profileImage?(_loggedInUser$4=loggedInUser[0])===null||_loggedInUser$4===void 0?void 0:_loggedInUser$4.profileImage:\"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"What's happening?\",onChange:e=>setPost(e.target.value),value:post//the post\n,required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"imageIcon_tweetButton\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"image\",className:\"imageIcon\",children:isLoading?/*#__PURE__*/_jsx(\"p\",{children:\"Uploading Image\"}):/*#__PURE__*/_jsx(\"p\",{children:imageURL?'Image Uploaded':/*#__PURE__*/_jsx(AddPhotoAlternateOutlinedIcon,{})})}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"image\",className:\"imageInput\",onChange:handleUploadImage}),/*#__PURE__*/_jsx(Button,{className:\"tweetBox__tweetButton\",type:\"submit\",children:\"Tweet\"})]})]})});}export default TweetBox;","map":{"version":3,"names":["React","useState","Avatar","Button","AddPhotoAlternateOutlinedIcon","axios","useLoggedInUser","useAuthState","auth","jsx","_jsx","jsxs","_jsxs","TweetBox","_loggedInUser$","_loggedInUser$2","_loggedInUser$3","_loggedInUser$4","post","setPost","imageURL","setImageURL","isLoading","setIsLoading","loggedInUser","name","setName","username","setUsername","user","email","userProfilePic","profileImage","handleUploadImage","e","image","target","files","console","log","formData","FormData","set","then","res","data","display_url","catch","error","handleTweet","_user$providerData$","preventDefault","providerData","providerId","fetch","concat","json","_data$","_data$2","displayName","split","userPost","profilePhoto","photo","method","headers","body","JSON","stringify","className","children","onSubmit","src","type","placeholder","onChange","value","required","htmlFor","id"],"sources":["C:/Users/soumy/Documents/GitHub/twitter/frontend/src/pages/Feed/TweetBox/TweetBox.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport { Avatar, Button } from \"@mui/material\";\r\nimport AddPhotoAlternateOutlinedIcon from \"@mui/icons-material/AddPhotoAlternateOutlined\";\r\nimport axios from \"axios\";\r\n// import { useUserAuth } from \"../../../context/UserAuthContext\";\r\nimport useLoggedInUser from \"../../../hooks/useLoggedInUser\";\r\n\r\nimport { useAuthState } from 'react-firebase-hooks/auth'\r\nimport auth from '../../../firebase.init';\r\n\r\nfunction TweetBox() {\r\n  const [post, setPost] = useState(\"\");\r\n  const [imageURL, setImageURL] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loggedInUser] = useLoggedInUser();\r\n  const [name, setName] = useState('');\r\n  const [username, setUsername] = useState(' ');\r\n  const [user]=useAuthState(auth);\r\n//   const { user } = useUserAuth();//current user\r\n  const email = user?.email;\r\n\r\n  //if profile picture is there, that will be displayed otherwise the avatar will be \r\n  const userProfilePic = loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"\r\n\r\n  /* this is the console structure when user signs up using email/password unlike google sign in\r\n  providerData is user data and inside it is provider id which has value 'password' \r\n  And in case of google log in, the providerId is 'google.com' */\r\n  // console.log(user?.providerData[0]?.providerId);\r\n\r\n//   console.log(loggedInUser);\r\n  const handleUploadImage = (e) => {\r\n    setIsLoading(true); //when we upload our imae it should be loading\r\n    const image = e.target.files[0]; //getting the image\r\n    console.log(image);\r\n    const formData = new FormData();\r\n    formData.set(\"image\", image);\r\n\r\n    //using axios method to implement fetch method easily as fetch will complex it\r\n    axios.post(\"https://api.imgbb.com/1/upload?key=023ae543332e64852a79bb86e7615247\",formData) //this api key is from imgbb.com where we will host our images for free\r\n    .then((res) => {//getting response\r\n        // setImageURL(res);\r\n        //console.log(res); //in console->object->data->data->display_url->contains the pictur ethat we uploaded so we will nw setImageUrl equal to that path\r\n        setImageURL(res.data.data.display_url);\r\n        console.log(res.data.data.display_url); //now this will display the uploaded image url in imgbb site\r\n        setIsLoading(false);\r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n        setIsLoading(false);\r\n     });\r\n  };\r\n\r\n  const handleTweet = (e) => {\r\n    e.preventDefault();\r\n    console.log(user);\r\n\r\n    /* if user has loggedIn using google account login then in that case we don not have user info\r\n    so we are checking if user logged in using email/password then we set name and username according to user data structure as shown in console */\r\n    if (user?.providerData[0]?.providerId === 'password') {\r\n        fetch(`http://localhost:5000/loggedInUser?email=${email}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setName(data[0]?.name)\r\n                setUsername(data[0]?.username)\r\n            })\r\n    }\r\n    else {\r\n        setName(user?.displayName)\r\n        setUsername(email?.split('@')[0])\r\n    }\r\n\r\n    if (name) {\r\n      const userPost = {\r\n        profilePhoto: userProfilePic,\r\n        post: post,\r\n        photo: imageURL,\r\n        username: username,\r\n        name: name,\r\n        email: email,\r\n      };\r\n      // console.log(userPost);\r\n      setPost(\"\");//resetting the post field & image back i.e., after posting something the input will get empty again\r\n      setImageURL(\"\");\r\n      fetch(`http://localhost:5000/post`, {//in fetch we are fetching the post route\r\n          method: \"POST\",\r\n          headers: {\r\n              'Content-type': 'application/json'\r\n          },\r\n          body: JSON.stringify(userPost)\r\n      })\r\n        .then(res => res.json()) // we get the response\r\n        .then(data => { //get data n console log it\r\n            console.log(data);\r\n        })\r\n\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form onSubmit={handleTweet}>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar src={loggedInUser[0]?.profileImage ? loggedInUser[0]?.profileImage : \"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png\"} />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"What's happening?\"\r\n            onChange={(e) => setPost(e.target.value)}\r\n            value={post} //the post\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"imageIcon_tweetButton\">\r\n          {/* <label htmlFor=\"image\" className=\"imageIcon\">\r\n            <AddPhotoAlternateOutlinedIcon />\r\n          </label> */}\r\n\r\n          {/*if image is loading  then this will show Uploading image and if its not loading then either image is uploaded or not, if not then we display th AddPhtotIcon*/}\r\n          <label htmlFor='image' className=\"imageIcon\">\r\n            {\r\n                isLoading ? <p>Uploading Image</p> : <p>{imageURL ? 'Image Uploaded' : <AddPhotoAlternateOutlinedIcon />}</p>\r\n            }\r\n          </label>\r\n\r\n          <input\r\n            type=\"file\"\r\n            id=\"image\"\r\n            className=\"imageInput\"\r\n            onChange={handleUploadImage}\r\n          />\r\n          <Button className=\"tweetBox__tweetButton\" type=\"submit\">\r\n            Tweet\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\nexport default TweetBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}