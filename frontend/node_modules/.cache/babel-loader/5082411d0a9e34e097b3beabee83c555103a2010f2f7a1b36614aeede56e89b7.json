{"ast":null,"code":"import React from'react';import{useAuthState}from'react-firebase-hooks/auth';import auth from'../firebase.init';import{Navigate}from'react-router-dom';import PageLoading from'./PageLoading';import{jsx as _jsx}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children}=_ref;const[user,isLoading]=useAuthState(auth);//if user is loading \nif(isLoading){return/*#__PURE__*/_jsx(PageLoading,{});}//if user is not valid i.e not logged in then navigate to login page\nif(!user){return/*#__PURE__*/_jsx(Navigate,{to:\"/login\"});}//if user exists then return to children\nreturn children;};export default ProtectedRoute;","map":{"version":3,"names":["React","useAuthState","auth","Navigate","PageLoading","jsx","_jsx","ProtectedRoute","_ref","children","user","isLoading","to"],"sources":["C:/Users/soumy/Documents/GitHub/twitter/frontend/src/pages/ProtectedRoute.js"],"sourcesContent":["import React from 'react'\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport auth from '../firebase.init';\r\nimport { Navigate } from 'react-router-dom';\r\nimport PageLoading from './PageLoading';\r\n\r\nconst ProtectedRoute = ({children}) => {\r\n  const [user,isLoading]=useAuthState(auth);\r\n  \r\n  //if user is loading \r\n  if(isLoading){\r\n    return <PageLoading />\r\n  }\r\n\r\n  //if user is not valid i.e not logged in then navigate to login page\r\n  if(!user){\r\n    return <Navigate to='/login'/>\r\n  }\r\n\r\n\r\n  //if user exists then return to children\r\n  return children;\r\n}\r\n\r\nexport default ProtectedRoute"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,YAAY,KAAQ,2BAA2B,CACxD,MAAO,CAAAC,IAAI,KAAM,kBAAkB,CACnC,OAASC,QAAQ,KAAQ,kBAAkB,CAC3C,MAAO,CAAAC,WAAW,KAAM,eAAe,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAExC,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAgB,IAAf,CAACC,QAAQ,CAAC,CAAAD,IAAA,CAChC,KAAM,CAACE,IAAI,CAACC,SAAS,CAAC,CAACV,YAAY,CAACC,IAAI,CAAC,CAEzC;AACA,GAAGS,SAAS,CAAC,CACX,mBAAOL,IAAA,CAACF,WAAW,GAAE,CAAC,CACxB,CAEA;AACA,GAAG,CAACM,IAAI,CAAC,CACP,mBAAOJ,IAAA,CAACH,QAAQ,EAACS,EAAE,CAAC,QAAQ,CAAC,CAAC,CAChC,CAGA;AACA,MAAO,CAAAH,QAAQ,CACjB,CAAC,CAED,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}